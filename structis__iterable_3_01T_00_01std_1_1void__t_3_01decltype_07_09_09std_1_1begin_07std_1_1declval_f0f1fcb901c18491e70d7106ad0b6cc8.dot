digraph "is_iterable&lt; T, std::void_t&lt; decltype(++std::begin(std::declval&lt; T &gt;()) !=std::end(std::declval&lt; T &gt;())), typename std::enable_if_t&lt; std::is_integral_v&lt; typename std::remove_reference_t&lt; decltype(*std::declval&lt; decltype(std::begin(std::declval&lt; T &gt;()))&gt;())&gt; &gt; &gt; &gt; &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="is_iterable\< T, std\l::void_t\< decltype(\l++std::begin(std::declval\l\< T \>()) !=std::end(std\l::declval\< T \>())), typename\l std::enable_if_t\< std::is_integral\l_v\< typename std::remove_reference\l_t\< decltype(*std::declval\< decltype\l(std::begin(std::declval\< T \>()))\>())\> \> \> \> \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="std::true_type",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
