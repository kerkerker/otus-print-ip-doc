digraph "Graphical Class Hierarchy"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="true_type",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node0 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node0 [label="is_iterable\< T, std\l::void_t\< decltype(\l++std::begin(std::declval\l\< T \>()) !=std::end(std\l::declval\< T \>())), typename\l std::enable_if_t\< std::is_integral\l_v\< typename std::remove_reference\l_t\< decltype(*std::declval\< decltype\l(std::begin(std::declval\< T \>()))\>())\> \> \> \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structis__iterable_3_01T_00_01std_1_1void__t_3_01decltype_07_09_09std_1_1begin_07std_1_1declval_392585982a1872b3ba36737c15041273.html"];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="is_string_like\< T,\l std::void_t\< typename\l std::enable_if_t\< std\l::is_same_v\< remove_cvref\l_t\< T \>, std::string \>\|\|std\l::is_same_v\< remove_cvref_t\l\< T \>, char * \>\|\|std::is_same\l_v\< remove_cvref\< T \>, std::string\l_view \> \> \> \>",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structis__string__like_3_01T_00_01std_1_1void__t_3_01typename_01std_1_1enable__if__t_3_01std_1_1e961e1cac5eead1dab7c9afeacd861ed.html"];
}
